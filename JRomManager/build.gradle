plugins {
	id 'java' 
	id "de.undercouch.download" version "4.0.4"
	id "nebula.ospackage" version "8.1.0"
	id "de.inetsoftware.setupbuilder" version "4.8.7"
	id "io.freefair.lombok" version "4.1.6"
//	id 'io.franzbecker.gradle-lombok' version '1.14'
//	id "edu.sc.seis.macAppBundle" version "2.3.0"
}


apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadJavadoc = true
		downloadSources = true
		file {
			whenMerged { classpath ->
				classpath.entries.removeAll { entry ->
					if ( entry.kind == 'src' ) {
//						entry.includes = []
//						entry.excludes = []
						entry.getEntryAttributes().clear()
					}
					if ( entry.hasProperty('output') ) {
						entry.output = null // use the default
					}
					false
				}
			}
		}
	}
}


lombok {
	version = '1.18.12'
//	config['lombok.accessors.chain'] = 'true'
//	sha256 = ""
}

ext.props = new Properties()
file("dist/ver.properties").withInputStream { props.load(it) }

version = props.getProperty("Specification-Version")+'.'+props.getProperty("Implementation-Version")

repositories {
	mavenCentral()
}

apply plugin: 'de.undercouch.download'

def SevenZipJBindingMyVersion = '16.02-2.01beta'
def SevenZipJBindingVersion = '16.02-2.01'

task downloadSevenZipJBinding(type: Download) {
	src 'https://github.com/optyfr/sevenzipjbinding/releases/download/'+SevenZipJBindingVersion+'/sevenzipjbinding.jar'
	dest "$buildDir/SevenZipJBinding/sevenzipjbinding-"+SevenZipJBindingVersion+".jar"
	onlyIfModified true
}
task downloadSevenZipJBindingPlatforms(type: Download) {
	src([
		'https://github.com/optyfr/sevenzipjbinding/releases/download/'+SevenZipJBindingMyVersion+'/sevenzipjbinding-FreeBSD-amd64.jar',
		'https://github.com/optyfr/sevenzipjbinding/releases/download/'+SevenZipJBindingMyVersion+'/sevenzipjbinding-FreeBSD-i386.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-linux-armv71/'+SevenZipJBindingVersion+'/sevenzipjbinding-linux-armv71-'+SevenZipJBindingVersion+'.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-linux-armv6/'+SevenZipJBindingVersion+'/sevenzipjbinding-linux-armv6-'+SevenZipJBindingVersion+'.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-linux-armv5/'+SevenZipJBindingVersion+'/sevenzipjbinding-linux-armv5-'+SevenZipJBindingVersion+'.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-linux-arm64/'+SevenZipJBindingVersion+'/sevenzipjbinding-linux-arm64-'+SevenZipJBindingVersion+'.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-linux-amd64/'+SevenZipJBindingVersion+'/sevenzipjbinding-linux-amd64-'+SevenZipJBindingVersion+'.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-linux-i386/'+SevenZipJBindingVersion+'/sevenzipjbinding-linux-i386-'+SevenZipJBindingVersion+'.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-mac-x86_64/'+SevenZipJBindingVersion+'/sevenzipjbinding-mac-x86_64-'+SevenZipJBindingVersion+'.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-windows-amd64/'+SevenZipJBindingVersion+'/sevenzipjbinding-windows-amd64-'+SevenZipJBindingVersion+'.jar',
		'https://repo1.maven.org/maven2/net/sf/sevenzipjbinding/sevenzipjbinding-windows-x86/'+SevenZipJBindingVersion+'/sevenzipjbinding-windows-x86-'+SevenZipJBindingVersion+'.jar'
	])
	dest "$buildDir/SevenZipJBinding"
	onlyIfModified true
}

task SevenZipJBinding {
	dependsOn downloadSevenZipJBinding
	outputs.file "$buildDir/SevenZipJBinding/sevenzipjbinding-"+SevenZipJBindingVersion+".jar" 
}

task SevenZipJBindingPlatforms {
	dependsOn downloadSevenZipJBindingPlatforms
	outputs.file fileTree(dir: "$buildDir/SevenZipJBinding/") 
//	outputs.file fileTree(dir: "$buildDir/SevenZipJBinding/", exclude : "sevenzipjbinding-"+SevenZipJBindingVersion+".jar") 
}

task SevenZipJBindingAllPlatforms(type: Jar, dependsOn: SevenZipJBindingPlatforms) {
	def sevenzip_dirs = [] as Set
	def paths = files(SevenZipJBindingPlatforms)
	paths.each( {
		zipTree(it).filter { it.name.endsWith('sevenzipjbinding-lib.properties') }.each { 
			sevenzip_dirs += java.nio.file.Paths.get(it.path).getParent().getFileName().toString()
			println java.nio.file.Paths.get(it.path).getParent().getFileName().toString()
		}
		from (zipTree(it)) {
			include '*/**'
			exclude '*.properties'
	  	}
	})
	def props = new Properties()
	sevenzip_dirs.eachWithIndex{ item, idx -> props.setProperty('platform.'+(idx+1), item) }
	def propertyFile = file "$buildDir/sevenzipjbinding-platforms.properties"
	propertyFile.withWriter { props.store(it, null) }
	from(propertyFile)
	archiveName 'sevenzipjbinding-all-'+SevenZipJBindingVersion+'.' + extension
}

subprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	apply plugin: 'eclipse'
	version = props.getProperty("Specification-Version")+'.'+props.getProperty("Implementation-Version")
	repositories {
		mavenCentral()
	}
	eclipse {
		classpath {
			downloadJavadoc = true
			downloadSources = true
			file {
				whenMerged { classpath ->
					classpath.entries.removeAll { entry ->
						if ( entry.kind == 'src' ) {
//							entry.includes = []
//							entry.excludes = []
							entry.getEntryAttributes().clear()
						}
						if ( entry.hasProperty('output') ) {
							entry.output = null // use the default
						}
						false
					}
				}
			}
		}
	}
	jar {
		manifest {
			attributes(
				"Manifest-Version"     : "1.0",
				"Specification-Title"  : "JRomManager",
				"Specification-Version": props.getProperty("Specification-Version"),
				"Implementation-Title" : "jrm",
				"Implementation-Version" : props.getProperty("Implementation-Version")
			)
		}
		archiveName 'jrm-' + baseName + '-' + version + '.' + extension
	}
	
	
	
	dependencies {
		constraints {
			implementation('commons-codec:commons-codec') {
				version {
					prefer '1.+'
				}
			}
			implementation('commons-io:commons-io') {
				version {
					prefer '2.+'
				}
			}
			implementation('commons-cli:commons-cli') {
				version {
					prefer '1.+'
				}
			}
			implementation('org.apache.commons:commons-text') {
				version {
					prefer '1.+'
				}
			}
			implementation('org.apache.commons:commons-compress') {
				version {
					prefer '1.+'
				}
			}
			implementation('org.apache.commons:commons-lang3') {
				version {
					prefer '3.+'
				}
			}
			implementation('net.sf.sevenzipjbinding:sevenzipjbinding') {
				version {
					prefer SevenZipJBindingVersion
				}
			}
			implementation('one.util:streamex') {
				version {
					prefer '0.7.+'
				}
			}
			implementation('com.sun.activation:javax.activation') {
				version {
					prefer '1.2.0'
				}
			}
			implementation('com.eclipsesource.minimal-json:minimal-json') {
				version {
					prefer '0.9.5'
				}
			}
			compileOnly('com.github.spotbugs:spotbugs-annotations') {
				version {
					prefer '3.1.+'
				}
			}
			implementation('com.atlassian.commonmark:commonmark') {
				version {
					prefer '0.12.+'
				}
			}
			implementation('org.nanohttpd:nanohttpd-nanolets') {
				version {
					prefer '2.+'
				}
			}
			implementation('org.nanohttpd:nanohttpd-websocket') {
				version {
					prefer '2.+'
				}
			}
			implementation('org.eclipse.jetty:jetty-server') {
				version {
					prefer '9.+'
				}
			}
			implementation('org.eclipse.jetty:jetty-alpn-server') {
				version {
					prefer '9.+'
				}
			}
			implementation('org.eclipse.jetty:jetty-alpn-conscrypt-server') {
				version {
					prefer '9.+'
				}
			}
			implementation('org.eclipse.jetty:jetty-servlet') {
				version {
					prefer '9.+'
				}
			}
			implementation('org.eclipse.jetty.http2:http2-server') {
				version {
					prefer '9.+'
				}
			}
			implementation(group: 'com.google.code.gson', name: 'gson') {
				version {
					prefer 'latest.release'
				}
			}
			implementation('commons-dbutils:commons-dbutils') {
				version {
					prefer 'latest.release'
				}
			}
			implementation('com.h2database:h2') {
				version {
					prefer 'latest.release'
				}
			}
			implementation('de.mkammerer:argon2-jvm') { 
				version { 
					prefer '2.+' 
				}
			}
			implementation('org.mindrot:jbcrypt') { 
				version { 
					prefer '0.4' 
				}
			}
		}
	}
}

project(':JRomManager:trrntzip') {
	sourceSets {
		main {
			java {
				srcDirs = ["../../Jtrrntzip/src"]
			}
			resources {
				srcDirs = ["../../Jtrrntzip/src"]
			}
		}
	}
	dependencies {
		implementation group: 'commons-codec', name:'commons-codec'
		implementation group: 'commons-io', name: 'commons-io'
	}
}



project(':JRomManager:jrmcore') {
	apply plugin: "io.freefair.lombok"
	sourceSets {
		main {
			java {
				srcDirs = ["../src"]
			}
			resources {
				srcDirs = ["../src"]
			}
		}
	}
	dependencies {
		implementation project(':JRomManager:trrntzip')
		implementation group: 'commons-codec', name:'commons-codec'
		implementation group: 'commons-io', name: 'commons-io'
		implementation group: 'org.apache.commons', name: 'commons-text'
		implementation group: 'org.apache.commons', name: 'commons-compress'
		implementation group: 'net.sf.sevenzipjbinding', name: 'sevenzipjbinding'
		runtime files(SevenZipJBindingAllPlatforms)
		implementation group: 'one.util', name: 'streamex'
		implementation group: 'com.sun.activation', name: 'javax.activation'
		implementation group: 'com.eclipsesource.minimal-json', name: 'minimal-json'
		compileOnly group: 'com.github.spotbugs', name:'spotbugs-annotations'
	}
	jar {
		manifest {
			attributes(
				"Specification-Title"  : "JRomManager Core",
				"Implementation-Title" : "jrmcore",
			)
		}
	}
}

project(':JRomManager:jrmcli') {
	apply plugin: "io.freefair.lombok"
	sourceSets {
		main {
			java {
				srcDirs = ["../src-cli"]
			}
			resources {
				srcDirs = ["../src-cli"]
			}
		}
	}
	dependencies {
		implementation project(':JRomManager:jrmcore')
		implementation group: 'commons-cli', name: 'commons-cli'
		implementation group: 'commons-io', name: 'commons-io'
		implementation group: 'org.apache.commons', name: 'commons-lang3'
		implementation group: 'com.eclipsesource.minimal-json', name: 'minimal-json'
	}
	jar {
		manifest {
			attributes(
				"Specification-Title"  : "JRomManager CLI",
				"Implementation-Title" : "jrmcli",
			)
		}
	}
}

project(':JRomManager:jrmupdater') {
	sourceSets {
		main {
			java {
				srcDirs = ["../../JUpdater/src"]
			}
		}
	}
	dependencies {
		implementation group: 'com.eclipsesource.minimal-json', name: 'minimal-json'
		implementation group: 'com.atlassian.commonmark', name: 'commonmark'
	}
	jar {
		manifest {
			attributes(
				"Specification-Title"  : "JRomManager Updater",
				"Implementation-Title" : "jupdater",
			)
		}
	}
}

project(':JRomManager:res-icons') {
	sourceSets {
		main {
			java {
				srcDirs = ["../src-res-icons"]
			}
			resources {
				srcDirs = ["../src-res-icons"]
			}
		}
	}
	dependencies {
	}
	jar {
		manifest {
			attributes(
				"Specification-Title"  : "JRomManager Resources",
				"Implementation-Title" : "res-icons",
			)
		}
	}
}

project(':JRomManager:jrmstandalone') {
	apply plugin: "io.freefair.lombok"
	sourceSets {
		main {
			java {
				srcDirs = ["../src-standalone"]
			}
		}
	}
	dependencies {
		implementation project(':JRomManager:jrmcore')
		implementation project(':JRomManager:res-icons')
		implementation project(':JRomManager:jrmupdater')
		implementation group: 'commons-codec', name:'commons-codec'
		implementation group: 'commons-cli', name: 'commons-cli'
		implementation group: 'commons-io', name: 'commons-io'
		implementation group: 'org.apache.commons', name: 'commons-lang3'
		implementation group: 'one.util', name: 'streamex'
		implementation group: 'com.eclipsesource.minimal-json', name: 'minimal-json'
		compile 'com.sun.activation:javax.activation:1.2.0'
	}
	jar {
		manifest {
			attributes(
				"Specification-Title"  : "JRomManager Standalone",
				"Implementation-Title" : "jrmstandalone",
			)
		}
	}
}

project(':JRomManager:jrmserver') {
	apply plugin: "io.freefair.lombok"
	sourceSets {
		main {
			java {
				srcDirs = ["../src-server"]
			}
		}
	}
	dependencies {
		implementation project(':JRomManager:jrmcore')
		implementation project(':JRomManager:res-icons')
		implementation group: 'commons-cli', name: 'commons-cli'
		implementation group: 'commons-io', name: 'commons-io'
		implementation group: 'org.apache.commons', name: 'commons-lang3'
		implementation group: 'org.nanohttpd', name: 'nanohttpd-nanolets'
		implementation group: 'org.nanohttpd', name: 'nanohttpd-websocket'
		implementation group: 'org.eclipse.jetty', name:'jetty-server'
		implementation group: 'org.eclipse.jetty', name:'jetty-servlet'
		implementation 'org.eclipse.jetty:jetty-security'
		implementation 'org.eclipse.jetty:jetty-alpn-server'
		implementation 'org.eclipse.jetty:jetty-alpn-conscrypt-server'
		implementation 'org.eclipse.jetty.http2:http2-server'
		implementation group: 'com.eclipsesource.minimal-json', name: 'minimal-json'
		implementation group: 'com.google.code.gson', name: 'gson'
		implementation group: 'one.util', name: 'streamex'
		implementation group: 'commons-dbutils', name:'commons-dbutils'
		implementation group: 'com.h2database', name:'h2'
		implementation group: 'org.mindrot', name:'jbcrypt'
		implementation group: 'de.mkammerer', name:'argon2-jvm'
	}
	jar {
		manifest {
			attributes(
				"Specification-Title"  : "JRomManager Server",
				"Implementation-Title" : "jrmserver",
			)
		}
	}
}

dependencies {
	implementation project(':JRomManager:jrmstandalone')
	implementation project(':JRomManager:jrmcli')
	implementation project(':JRomManager:jrmserver')
}

javadoc {
	source += project(':JRomManager:trrntzip').sourceSets.main.allJava
	source += project(':JRomManager:jrmcore').sourceSets.main.allJava
	source += project(':JRomManager:jrmupdater').sourceSets.main.allJava
	source += project(':JRomManager:jrmstandalone').sourceSets.main.allJava
	source += project(':JRomManager:jrmserver').sourceSets.main.allJava
	classpath += project(':JRomManager:trrntzip').sourceSets.main.compileClasspath
	classpath += project(':JRomManager:jrmcore').sourceSets.main.compileClasspath
	classpath += project(':JRomManager:jrmupdater').sourceSets.main.compileClasspath
	classpath += project(':JRomManager:jrmstandalone').sourceSets.main.compileClasspath
	classpath += project(':JRomManager:jrmserver').sourceSets.main.compileClasspath
	options.showAll()
	options.with {
		links 'https://docs.oracle.com/javase/8/docs/api/'
		source '8'
	}
}

build.dependsOn javadoc



jar {
	def mainClassName="jrm.JRomManager"
	manifest {
		def path =configurations.runtimeClasspath.filter { it.name.endsWith('.jar') }.collect { 'lib/' + it.getName() }.join(' ')
		attributes(
			"Manifest-Version"     : "1.0",
			"Specification-Title"  : "JRomManager",
			"Specification-Version": props.getProperty("Specification-Version"),
			"Implementation-Title" : "jrm",
			"Implementation-Version" : props.getProperty("Implementation-Version"),
			"Main-Class"           : mainClassName,
			"Class-Path"           : path
		)
		archiveName baseName + '.' + extension
	}
}

task cliFatJar(type: Jar) {
	def mainClassName="jrm.JRomManagerCLI"
	manifest {
		attributes(
			"Manifest-Version"     : "1.0",
			"Specification-Title"  : "JRomManager",
			"Specification-Version": props.getProperty("Specification-Version"),
			"Implementation-Title" : "jrm",
			"Implementation-Version" : props.getProperty("Implementation-Version"),
			'Main-Class': mainClassName
		)
	}
	baseName = 'JRomManagerCLI'
	from(project(':JRomManager:jrmcli').sourceSets.main.output.classesDirs)
	from(project(':JRomManager:jrmcli').sourceSets.main.resources)
	from { project(':JRomManager:jrmcli').configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

build.dependsOn cliFatJar 

task docZip(type: Zip, dependsOn: javadoc) {
	destinationDir buildDir
	classifier "javadocs"
	from javadoc.outputs.files
	into "docs"
	archiveName baseName + '-' + version + '-apidocs' + '.' + extension
	destinationDir = file("$buildDir/distributions/")
}

task downloadWrapper(type: Download) {
	src 'https://download.tanukisoftware.com/wrapper/3.5.37/wrapper-delta-pack-3.5.37.zip'
	dest file("$buildDir/wrapper.zip")
	onlyIfModified true
}

task distZip(type: Zip, dependsOn: [jar, SevenZipJBindingAllPlatforms, ':WebClient:build',downloadWrapper]) {
	from (configurations.runtimeClasspath) {
		into('lib')
		exclude '*.zip'
		include '*.jar'
	}
	from (jar)
	from (project(':JUpdater').jar)
	from (new File(project(':WebClient').buildDir,"/gwt/out/smartgwt")) {
		into('webclient')
	}
	from (zipTree(file("$buildDir/wrapper.zip"))) {
		exclude '*/bin/*.bat'
		exclude '*/*/*test*'
		exclude '*/*/*demo*'
		exclude '*/src/**'
		exclude '*/conf/*'
		eachFile { fcp ->
			fcp.path = fcp.path.replaceFirst("^wrapper-delta-pack-[0-9a-z\\.]*", 'wrapper')
			if(fcp.path.endsWith(".sh") || fcp.name.startsWith("wrapper")) {
				fcp.mode = 0755
			}
		}
		includeEmptyDirs false
  	}
	from ('dist/wrapper') {
		include '*.bat'
		include '*.sh'
		include '*.shconf'
		into 'wrapper/bin'
		fileMode = 0755
	}
	from ('dist/wrapper') {
		include 'wrapper.conf'
		into 'wrapper/conf'
	}
	from ('dist/wrapper') {
		include 'wrapper.dll'
		into 'wrapper/lib'
	}
	from ('dist/logs') {
		include '.do_not_delete'
		into 'logs'
		dirMode = 0777
	}
	from ('dist') {
		include '*.bat'
		include '*.sh'
		fileMode = 0755
	}
	archiveName baseName + '-' + version + '.' + extension
	destinationDir = file("$buildDir/distributions/")
}

build.dependsOn distZip
build.dependsOn docZip

apply plugin: 'nebula.ospackage'

ospackage {
	packageName 'jrommanager'
	packageDescription 'A Mame and Retrogaming Rom Manager, Java alternative to ClrMamePro'
	release '1'
	type= BINARY
	license 'GPL-3'
	vendor 'optyfr'
	packager 'optyfr'
	maintainer 'optyfr'
	user 'root'
	permissionGroup 'root'
	into '/opt/jrommanager'
	url 'https://github.com/optyfr/JRomManager'
	from (configurations.runtimeClasspath) {
		into('lib')
		exclude '*.zip'
		include '*.jar'
	}
	from (jar)
	from (project(':JUpdater').jar)
	from (zipTree(distZip.archivePath)) {
		include 'wrapper/**'
		include 'webclient/**'
  	}
	from ('dist') {
		include '*.bat'
		include '*.sh'
		include '*.shconf'
		fileMode = 0755
	}
	from ('dist') {
		include name+'.desktop'
		into '/usr/share/applications'
	}
	from ('dist') {
		include name+'.png'
		into '/usr/share/pixmaps'
	}
	link('/usr/bin/jrommanager', '/opt/jrommanager/JRomManager-multi.sh')
}

buildDeb {
	requires('java8-runtime').or('java9-runtime').or('java10-runtime').or('java11-runtime')
	arch = "all"
}

buildRpm {
	requires('java', '1:1.8.0', EQUAL).or('java', '1:9', EQUAL).or('java', '1:10', EQUAL).or('java', '1:11', EQUAL)
	arch = NOARCH
	os = LINUX
	addParentDirs = false
	createDirectoryEntry = false
}

build.dependsOn buildRpm
build.dependsOn buildDeb

apply plugin: "de.inetsoftware.setupbuilder"
		
setupBuilder {
	vendor = 'optyfr'
	application = project.name
	appIdentifier = project.name
	version = props.getProperty("Specification-Version")+'.'+props.getProperty("Implementation-Version");
	licenseFile = new File(project(':JLauncher').projectDir,'LICENSE')
	icons = new File(new File(project.projectDir,'dist'),project.name+'.png')
	from (configurations.runtimeClasspath) {
		into('lib')
		exclude '*.zip'
		include '*.jar'
	}
	from (jar)
	from (project(':JUpdater').jar)
	from (zipTree(distZip.archivePath)) {
		include 'wrapper/**'
		include 'webclient/**'
  	}
	desktopStarter {
		displayName = project.name
		executable = project.name + '.exe'
	}
	mainJar = 'JRomManager.jar'
	mainClass = 'jrm.JRomManagerMulti'
//	setup.bundleJre = 1.8
}

import org.apache.tools.ant.taskdefs.condition.Os
if (Os.isFamily(Os.FAMILY_WINDOWS))
{
	def result = exec{
		executable =  "where"
		args = ["candle.exe"]
		ignoreExitValue = true
		standardOutput = new ByteArrayOutputStream()
		errorOutput = new ByteArrayOutputStream()
	}
	
	if(result.getExitValue()==0)
	{
		
		task buildMSI(type: com.inet.gradle.setup.msi.Msi, dependsOn: ':JLauncher:build') {
			arch = 'x86'
			languages = ['en_us'] 
			from (new File(project(':JLauncher').buildDir , 'exe/JLauncher'))
			{
				include 'JLauncher.exe'
				rename { project.name+'.exe' }
			}
			onlyIf {
				Os.isFamily(Os.FAMILY_WINDOWS)
			}
		}
		
//		build.dependsOn buildMSI
	}
	else
		logger.warn("Can't find WIX ToolSet binaries in PATH, Skipping MSI build.")
}
else
	logger.info('Not on Windows, skipping MSI build.')

if (Os.isFamily(Os.FAMILY_MAC))
{
	task buildDMG(type: com.inet.gradle.setup.dmg.Dmg, dependsOn: distZip) {
		onlyIf {
			Os.isFamily(Os.FAMILY_MAC)
		}
	}
		
	build.dependsOn buildDMG

/*	apply plugin: "edu.sc.seis.macAppBundle"

	macAppBundle {
		mainClassName = "jrm.JRomManager"
	}

	build.dependsOn createDmg*/
}
else
	logger.info('Not on Mac, skipping DMG build.')
